(defun primep (n)
  (cond ((< n 2) nil)
		((= n 2) t)
		(t (let ((end (floor (sqrt n))))
			 (do ((i 2 (1+ i)))
				 ((> i end) t)
			   (if (zerop (rem n i))
				   (return nil)))))))

(defun prime-factor (n)
  (if (primep n)
	  (format t "~D~%" n)
	  (factor-iter n 2)))

(defun factor-iter (n factor)
  (if (zerop (rem n factor))
	  (let ((bigfactor (/ n factor)))
		(if (primep (/ n factor))
			(format t "~D~%" bigfactor)
			(factor-iter n (1+ factor))))
	  (factor-iter n (1+ factor))))

(dotimes (i (read))
  (prime-factor (read)))
